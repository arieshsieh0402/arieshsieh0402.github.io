[{"content":"A basic record of local n8n deployment.\nSteps Docker docker-compose.yml version: \u0026#34;3.9\u0026#34; volumes: n8n_storage: services: n8n: image: n8nio/n8n:latest restart: always ports: - \u0026#34;127.0.0.1:5678:5678\u0026#34; volumes: - n8n_storage:/home/node/.n8n environment: - WEBHOOK_URL=https://\u0026lt;your-ngrok-domain\u0026gt;.ngrok-free.app # External webhook URL Usage Expose local port 5678 to the internet via ngrok: ngrok http http://localhost:5678 Copy the generated ngrok public URL (e.g., https://xxxx-xxx-xxx.ngrok-free.app).\nEdit the docker-compose.yml file and replace \u0026lt;your-ngrok-domain\u0026gt; in WEBHOOK_URL with your actual ngrok URL.\nStart the n8n service using Docker Compose:\ndocker compose up -d Sign up / Sign in to n8n User account data will be persisted in the Docker volume (n8n_storage), so your credentials and workflows will be retained across container restarts.\nThen you can create your own workflow!\n","permalink":"http://localhost:1313/posts/2025-07-04-n8n-local/","summary":"\u003cp\u003eA basic record of local n8n deployment.\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"steps\"\u003eSteps\u003c/h1\u003e\n\u003ch2 id=\"docker\"\u003eDocker\u003c/h2\u003e\n\u003ch3 id=\"docker-composeyml\"\u003edocker-compose.yml\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3.9\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003en8n_storage\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003en8n\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003en8nio/n8n:latest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;127.0.0.1:5678:5678\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003en8n_storage:/home/node/.n8n\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eenvironment\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003eWEBHOOK_URL=https://\u0026lt;your-ngrok-domain\u0026gt;.ngrok-free.app\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# External webhook URL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExpose local port 5678 to the internet via ngrok:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003engrok http http://localhost:5678\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\n\u003cp\u003eCopy the generated ngrok public URL (e.g., \u003ccode\u003ehttps://xxxx-xxx-xxx.ngrok-free.app\u003c/code\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEdit the \u003ccode\u003edocker-compose.yml\u003c/code\u003e file and replace \u003ccode\u003e\u0026lt;your-ngrok-domain\u0026gt;\u003c/code\u003e in \u003ccode\u003eWEBHOOK_URL\u003c/code\u003e with your actual ngrok URL.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eStart the n8n service using Docker Compose:\u003c/p\u003e","title":"n8n 本地部署紀錄"},{"content":"前言 公司原本的上線流程最近要走 Azure DevOps 方式上線，我維護的 iOS App 不外乎也要走這個流程。原本測試都沒有太大問題，但上線之後發現 App Groups 功能沒有正確運作，就開始查找問題，最終找到問題所在並解決，記錄一下過程，並延伸相關知識。\nTrouble Shooting 一開始覺得很奇怪，這次上線的內容並沒有異動到 App Group 的設定，所以應該跟 source code 沒有太大關係。後來先嘗試在本機 build 一版，結果發現透過這個方式運作正常，但透過 Azure pipeline build 出來的就會發生問題。因此轉向研究 pipeline yaml 的設定是否出現狀況。\n先進一步確認透過 Azure pipeline 包出來的 artifacts 內容是否正確，一般而言，iOS App 打包後的成品如下：\nDistributionSummary.plist ExportOptions.plist YourAppName.ipa Packaging.log 查看 .ipa 我們可以查看 YourAppName.ipa 裡面到底簽入了哪些權限：\n解壓縮 .ipa 檔案：\nunzip YourAppName.ipa -d AppContents 進入 Payload 目錄：\ncd AppContents/Payload 執行 codesign 指令：\ncodesign -d --entitlements :- YourAppName.app 每個部分的含義是：\ncodesign：呼叫程式碼簽署工具 d：表示 \u0026ldquo;display\u0026rdquo;，用於顯示簽署資訊 -entitlements :-：要求工具顯示應用程式中包含的所有權限（entitlements） 這裡的 :- 是一個特殊的語法，表示將輸出導向到標準輸出（stdout） YourAppName.app：要檢查的應用程式套件路徑 如果有正確簽入 App Groups 的權限，應該要有 \u0026lt;key\u0026gt;com.apple.security.application-groups\u0026lt;/key\u0026gt; 的蹤跡，但發現透過 Azure pipeline 包出來 .ipa 沒有。\n這個時候就進一步查看，是不是在打包開始前根本沒有將權限設定進去。\nDistributionSummary.plist 當你將 iOS App 打包成 .ipa 檔案時，系統會自動生成這個 plist 檔案。它就像是一份「出廠證明書」，記錄了這個應用程式在打包時的所有重要設定和權限資訊包含：\n應用程式基本資訊 權限設定(Entitlements)：如推播、App Groups、iCloud 等 簽署資訊：如描述檔(provision profile)、分發憑證(certificate) 而跟今天 App Group 有關的部分，則要查找 Entitlements 的內容。\n正確來說應該要長得像下面這樣：\n\u0026lt;key\u0026gt;entitlements\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;application-identifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.xxx.xxx\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;com.apple.developer.team-identifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;xxxxxxxx\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;aps-environment\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;production\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;com.apple.security.application-groups\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;group.yyyyy.yyyyyy\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;get-task-allow\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;/dict\u0026gt; 應該要有 \u0026lt;key\u0026gt;com.apple.security.application-groups\u0026lt;/key\u0026gt; 這個 key，且裡面的值也要正確。\n這內容會在 Xcode 設定 App Groups 後，表示新增一個 Entitlement；而每個 Entitlement 最終會被編譯成 .entitlements 檔案，這個檔案會在建置過程中被簽入應用程式中。\n因此在 DistributionSummary.plist 中看到 \u0026lt;key\u0026gt;entitlements\u0026lt;/key\u0026gt; 時，那就是記錄了所有已經被簽入應用程式的權限。\n回到問題，我查看透過 Azure pipeline 包出來 DistributionSummary.plist 裡面，確實沒有 App Groups 的蹤跡，這有幾下幾種可能：\n第一種可能：設定過程的問題 專案中可能沒有正確啟用 App Groups 功能 在 Xcode 的 Signing \u0026amp; Capabilities 中沒有添加 App Groups 或者在添加 App Groups 後，沒有實際設定 App Groups 的識別碼 第二種可能：簽署過程的問題 使用的開發者帳號可能沒有 App Groups 的權限 描述檔（Provisioning Profile）中可能沒有包含 App Groups 的權限 簽署過程中可能出現了問題，導致這個權限沒有被正確包含 因為我很確定有正確啟用，所以應該可以排除第一種可能。而第二種可能，也很確定開發者帳號有權限、描述檔也有包含 App Groups，因此問題範圍就縮小到是簽署過程，也就是 pipeline yaml 的設定問題了。\nXcode@5 task pipeline 設定 Xcode@5 是 Azure Pipelines 提供的一個任務（task），專門用來在雲端執行 Xcode 相關的操作。這個「5」代表的是任務的版本號。\n這個任務可以執行多種 Xcode 相關的操作，例如：\n建置（build）您的 iOS 應用程式 封存（archive）應用程式以準備發布 執行測試（testing） 產生 .ipa 檔案 管理程式碼簽署（code signing） 簡單範例如下：\n- task: Xcode@5 inputs: actions: \u0026#39;archive\u0026#39; # 要執行的動作：建置、封存或測試 configuration: \u0026#39;Release\u0026#39; # 建置組態：Release 或 Debug scheme: \u0026#39;MyApp\u0026#39; # Xcode 專案的架構名稱 xcWorkspacePath: \u0026#39;MyApp.xcworkspace\u0026#39; # 工作區檔案的路徑 packageApp: true # 是否打包成 .ipa 檔案 exportOptions: \u0026#39;plist\u0026#39; # 匯出選項的格式 exportOptionsPlist: \u0026#39;exportOptions.plist\u0026#39; # 匯出設定檔的路徑 signingOption: \u0026#39;default\u0026#39; # 程式碼簽署方式 這邊有幾個參數值得注意：\nexportOptionsPlist exportOptionsPlist 是一個為 iOS App 打包過程提供詳細指示的檔案。這個 plist 檔案包含許多重要資訊，如基本發布設定(Team ID，發佈方式是 App Store 還是 Enterprise)、簽署相關設定(分發憑證、描述檔)等。\nsigningOption signingOption 決定了如何處理程式碼簽署，依據微軟官方文件，有以下幾種參數設定：\n1. default（專案預設） 這個選項告訴 Xcode「請使用專案中已經設定好的所有簽署配置」。當您使用這個選項時，建置系統會：\n完全遵循專案的原始簽署設定 採用 exportOptionsPlist 中定義的簽署參數 不會嘗試自動修改任何簽署相關的設定 2. auto（自動簽署） 選擇這個選項時，告訴 Xcode「請自動處理所有的簽署相關事務」：\n自動選擇適當的簽署憑證 自動管理佈建描述檔 可能會忽略一些特定的簽署設定 3. manual（手動簽署） 這個選項給予最大的控制權，告訴系統「我要明確指定所有簽署相關的設定」。使用這個選項時：\n需要明確提供簽署憑證 需要指定具體的佈建描述檔 4. nosign（不簽署） 這個選項告訴系統「完全不要進行程式碼簽署」。\n解決方式 要將此 key 設為 default\n因為在 yaml 檔中，我們同時自定義 exportOptions.plist，手動指定了簽署方式，但又將 signingOption 設為 auto，這就可能導致 Xcode 忽略或覆寫 exportOptionsPlist 中的某些設定，應該也就是造成 App Groups 權限沒有被正確簽入的原因。後來將此 key 設為 default，就成功將 App Groups 權限簽入了～\n","permalink":"http://localhost:1313/posts/2025-07-03-ios-azure/","summary":"\u003cp\u003e前言\n公司原本的上線流程最近要走 Azure DevOps 方式上線，我維護的 iOS App 不外乎也要走這個流程。原本測試都沒有太大問題，但上線之後發現 App Groups 功能沒有正確運作，就開始查找問題，最終找到問題所在並解決，記錄一下過程，並延伸相關知識。\u003c/p\u003e\n\u003ch2 id=\"trouble-shooting\"\u003eTrouble Shooting\u003c/h2\u003e\n\u003cp\u003e一開始覺得很奇怪，這次上線的內容並沒有異動到 App Group 的設定，所以應該跟 source code 沒有太大關係。後來先嘗試在本機 build 一版，結果發現透過這個方式運作正常，但透過 Azure pipeline build 出來的就會發生問題。因此轉向研究 pipeline yaml 的設定是否出現狀況。\u003c/p\u003e\n\u003cp\u003e先進一步確認透過 Azure pipeline 包出來的 artifacts 內容是否正確，一般而言，iOS App 打包後的成品如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eDistributionSummary.plist\nExportOptions.plist\nYourAppName.ipa\nPackaging.log\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"查看-ipa\"\u003e查看 .ipa\u003c/h3\u003e\n\u003cp\u003e我們可以查看 YourAppName.ipa 裡面到底簽入了哪些權限：\u003c/p\u003e\n\u003cp\u003e解壓縮 .ipa 檔案：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eunzip YourAppName.ipa -d AppContents\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e進入 Payload 目錄：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd AppContents/Payload\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e執行 codesign 指令：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecodesign -d --entitlements :- YourAppName.app\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e每個部分的含義是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecodesign\u003c/code\u003e：呼叫程式碼簽署工具\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ed\u003c/code\u003e：表示 \u0026ldquo;display\u0026rdquo;，用於顯示簽署資訊\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-entitlements :-\u003c/code\u003e：要求工具顯示應用程式中包含的所有權限（entitlements）\u003c/li\u003e\n\u003cli\u003e這裡的 \u003ccode\u003e:-\u003c/code\u003e 是一個特殊的語法，表示將輸出導向到標準輸出（stdout）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eYourAppName.app\u003c/code\u003e：要檢查的應用程式套件路徑\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果有正確簽入 App Groups 的權限，應該要有 \u003ccode\u003e\u0026lt;key\u0026gt;com.apple.security.application-groups\u0026lt;/key\u0026gt;\u003c/code\u003e 的蹤跡，但發現透過 Azure pipeline 包出來 .ipa 沒有。\u003c/p\u003e","title":"Azure Pipeline 編譯 iOS App Groups 權限未簽入問題"},{"content":"小弟最近要接手管理 APIM 了，會把踩的點記錄下來。\n在管理 Kong API Gateway 的過程中，發現在啟用 IP Restriction Plugin 並設置白名單後，該 consumer 仍然驗證失敗。經確認此情況與 IP 置換有關。\n該 consumer request 路徑為：\nClient → Load Balancer → Kong API Gateway → Backend Service\n在這樣的架構中，Kong 接收到的 IP 並不是實際的 Client IP，而是來自 Load Balancer 的內部 IP。\n經確認：\nKong 接收到的 client_ip 顯示為內部網段 IP（例如：以 .254 結尾）。 這些 IP 實際上是 Load Balancer 的 IP。 導致 IP Restriction Plugin 誤判來源 IP，合法用戶被錯誤拒絕。 Nginx 真實 IP 辨識機制 Kong 是建構在 Nginx 之上，利用 Nginx 的 ngx_http_realip_module 模組來從 HTTP Header 中擷取真正的 Client IP，並改寫 $remote_addr。\n常見的 HTTP Header：\nHeader 名稱 說明 X-Real-IP 包含直接與第一層代理連線的 Client IP X-Forwarded-For 包含完整轉發鏈，列出每一層代理經過的 IP（逗號分隔） Kong 設定參數說明：\n參數名稱 說明 trusted_ips 定義哪些 IP 被視為可信任的代理；只有來自這些 IP 的 Header 才會被信任 real_ip_header 指定從哪個 Header 擷取真實 IP，預設為 X-Real-IP real_ip_recursive 啟用後會從轉發鏈中遞迴取得最早的（最靠近 Client 的）IP 解決方式 修改 Kong 設定檔 編輯 /etc/kong/kong.conf，加入以下設定：\n# 信任 Load Balancer 的 IP trusted_ips = YOUR_LOAD_BALANCER_IP # 從 X-Forwarded-For Header 取得真實 IP real_ip_header = X-Forwarded-For # 啟用遞迴搜尋 real_ip_recursive = on 重新啟動 Kong kong reload Kong 重啟後會重新載入這些設定，透過 ngx_http_realip_module 將 $remote_addr 改寫為真實的 Client IP。此時 IP Restriction Plugin 將能正確依據實際來源 IP 進行存取控制。\n","permalink":"http://localhost:1313/posts/2025-07-03-apim-clientip/","summary":"\u003cp\u003e小弟最近要接手管理 APIM 了，會把踩的點記錄下來。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e在管理 Kong API Gateway 的過程中，發現在啟用 IP Restriction Plugin 並設置白名單後，該 consumer 仍然驗證失敗。經確認此情況與 IP 置換有關。\u003c/p\u003e\n\u003cp\u003e該 consumer request 路徑為：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eClient → Load Balancer → Kong API Gateway → Backend Service\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在這樣的架構中，Kong 接收到的 IP \u003cstrong\u003e並不是實際的 Client IP\u003c/strong\u003e，而是來自 Load Balancer 的內部 IP。\u003c/p\u003e\n\u003cp\u003e經確認：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKong 接收到的 client_ip 顯示為內部網段 IP（例如：以 .254 結尾）。\u003c/li\u003e\n\u003cli\u003e這些 IP 實際上是 Load Balancer 的 IP。\u003c/li\u003e\n\u003cli\u003e導致 IP Restriction Plugin 誤判來源 IP，合法用戶被錯誤拒絕。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nginx-真實-ip-辨識機制\"\u003eNginx 真實 IP 辨識機制\u003c/h3\u003e\n\u003cp\u003eKong 是建構在 \u003ccode\u003eNginx\u003c/code\u003e 之上，利用 \u003ccode\u003eNginx\u003c/code\u003e 的 \u003ccode\u003engx_http_realip_module\u003c/code\u003e 模組來從 HTTP Header 中擷取真正的 Client IP，並改寫 \u003ccode\u003e$remote_addr\u003c/code\u003e。\u003c/p\u003e","title":"Kong API Gateway 真實 client IP 識別"},{"content":"雖然説這個靜態網頁主要是拿來做個人筆記記錄用，但想到如果有寫錯的地方，誤人子弟又沒有人告知好像也是個問題， 研究了一下，原來有將留言直接串接到指定 GitHub repo 的 Issues 充作留言區 (但必需要登入 GitHub 才能留言。)的方式。\n實驗了一下，串接成功，記錄一下過程。\nStep 1: 準備 GitHub repo 確認你有一個公開的 GitHub repo，留言將儲存在這個 repo 的 Issues。 因為本站是部署在 GitHub Pages，理當就建立在這個 page 所屬 repo 上。\nStep 2: 安裝 Utterances GitHub App 前往 Utterances 的 GitHub App 頁面，將 App 安裝到你的留言 repo。\n這裡沒有必要全部授權，只授權單一 repo 即可。\nStep 3: 產生 Utterances script 繼續下一步，前往設定頁，依序填寫以下內容：\nrepo 名稱（格式：username/repo） Issue 對應規則（建議選 pathname 或 title） 可自訂 label（如 blog-comment）方便分類 選擇主題色系 將產生 \u0026lt;script ...\u0026gt;\u0026lt;/script\u0026gt; 複製下來。 Step 4: 整合到 Hugo（PaperMod） 在 Hugo 專案目錄下建立或修改 layouts/partials/comments.html，貼上剛剛產生的的 script。 接著在你的文章裡面啟用 comment: true\n--- title: \u0026#34;Hugo + PaperMod 靜態網站串接 Utterances 實作留言區\u0026#34; comments: true # 啟用留言 --- 這樣就完成了。\n","permalink":"http://localhost:1313/posts/2025-07-02-utterances/","summary":"\u003cp\u003e雖然説這個靜態網頁主要是拿來做個人筆記記錄用，但想到如果有寫錯的地方，誤人子弟又沒有人告知好像也是個問題，\n研究了一下，原來有將留言直接串接到指定 GitHub repo 的 Issues 充作留言區 (但必需要登入 GitHub 才能留言。)的方式。\u003c/p\u003e\n\u003cp\u003e實驗了一下，串接成功，記錄一下過程。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-準備-github-repo\"\u003eStep 1: 準備 GitHub repo\u003c/h2\u003e\n\u003cp\u003e確認你有一個公開的 GitHub repo，留言將儲存在這個 repo 的 Issues。\n因為本站是部署在 GitHub Pages，理當就建立在這個 page 所屬 repo 上。\u003c/p\u003e\n\u003ch2 id=\"step-2-安裝-utterances-github-app\"\u003eStep 2: 安裝 Utterances GitHub App\u003c/h2\u003e\n\u003cp\u003e前往 \u003ca href=\"https://github.com/apps/utterances\"\u003eUtterances\u003c/a\u003e 的 GitHub App 頁面，將 App 安裝到你的留言 repo。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"UtterancesApp\" loading=\"lazy\" src=\"/posts/2025-07-02-utterances/image-1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e這裡沒有必要全部授權，只授權單一 repo 即可。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"UtterancesAuth\" loading=\"lazy\" src=\"/posts/2025-07-02-utterances/image-2.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"step-3-產生-utterances-script\"\u003eStep 3: 產生 Utterances script\u003c/h2\u003e\n\u003cp\u003e繼續下一步，前往設定頁，依序填寫以下內容：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003erepo 名稱（格式：username/repo）\u003c/li\u003e\n\u003cli\u003eIssue 對應規則（建議選 pathname 或 title）\u003c/li\u003e\n\u003cli\u003e可自訂 label（如 blog-comment）方便分類\u003c/li\u003e\n\u003cli\u003e選擇主題色系\u003c/li\u003e\n\u003cli\u003e將產生 \u003ccode\u003e\u0026lt;script ...\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e 複製下來。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-4-整合到-hugopapermod\"\u003eStep 4: 整合到 Hugo（PaperMod）\u003c/h2\u003e\n\u003cp\u003e在 Hugo 專案目錄下建立或修改 \u003ccode\u003elayouts/partials/comments.html\u003c/code\u003e，貼上剛剛產生的的 script。\n接著在你的文章裡面啟用 \u003ccode\u003ecomment: true\u003c/code\u003e\u003c/p\u003e","title":"Hugo + PaperMod 靜態網站串接 Utterances 實作留言區"},{"content":"前言 整理一下在 Kong APIM 架構下，Redis 在快取與限流計數器同步上的應用。 因為之前沒接觸過，僅就目前理解部分紀錄，不會提到太多細節，未來有機會再補充～\nRedis 快取的用途 Kong API Gateway 可以 Redis 來做快取，主要目的是可以快速回應重複的 API 請求，讓資料變動不頻繁的 API 可以直接回傳快取內容，可減少後端服務壓力。\n限流計數器的同步需求 如果系統有對 consumer 限流需求，記錄在 db 是一個選項，但這樣就必須所有 gateway 的節點都跟 db 建立連線，且不適用於 dbless 或是 hybrid mode 的架構。\ndbless 是指 data plane 的設置透過 kong.yml 來配置，每次配置都需要重啟服務。\nhybrid mode 則是將 Control Plane 和 Data Plane 分離，CP 負責管理與同步設定，DP 專注於流量代理。DP 不直接連資料庫，只從 CP 接收設定。相反地，傳統模式沒有明確區分 DP 和 CP。每一台 Kong 節點同時扮演 CP 和 DP 的角色，也就是說，每個節點都可以管理設定（新增/修改服務、路由、插件等），這是 CP 的功能。每個節點也都會處理用戶端 API 請求，這是 DP 的功能，所有節點也都直接連接到資料庫。\n使用 Redis 來同步限流計數器（counter），確保多個 Gateway 節點能共用同一份計數資料是另一個選擇，他也支援 kong 內建的插件。\n但如果只用單一 Redis 或每個節點各自記錄，會導致計數不同步而使限流失去預期作用。因此需要一個所有節點都能存取的 Redis 服務，也就是 Redis Cluster 與 Redis Sentinel。\nKong 官方 plugin（開源版）僅支援單一 Redis 節點，企業版則支援 Redis Cluster 與 Redis Sentinel。若單一節點故障，counter 會遺失，因此建議使用後者架構。\nRedis：Cluster 與 Sentinel 圖片來源：How to use Redis with Kong Rate Limiting Plugin\nRedis Cluster：多個主節點（Master），可同時寫入更多資料，適合高寫入量場景。 Redis Sentinel：只有一個主節點，當主節點故障時，Sentinel 會自動選出新的主節點，確保服務不中斷。 架構實例 以我目前的系統來看，有三台主機（兩台 Redis + 一台監控），都啟動了 Sentinel，負責監控 Redis 健康狀態。\n主節點（Master）：負責所有寫入操作，並同步資料給從節點（Slave）。 從節點（Slave）：複製主節點資料，通常只提供讀取。 當主節點故障時，Sentinel 會自動協調選出新的主節點，並將其中一台從節點提升為主節點，確保服務持續運作。\n","permalink":"http://localhost:1313/posts/2025-07-01-kong-redis/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e整理一下在 Kong APIM 架構下，Redis 在快取與限流計數器同步上的應用。\n因為之前沒接觸過，僅就目前理解部分紀錄，不會提到太多細節，未來有機會再補充～\u003c/p\u003e\n\u003ch1 id=\"redis-快取的用途\"\u003eRedis 快取的用途\u003c/h1\u003e\n\u003cp\u003eKong API Gateway 可以 Redis 來做快取，主要目的是可以快速回應重複的 API 請求，讓資料變動不頻繁的 API 可以直接回傳快取內容，可減少後端服務壓力。\u003c/p\u003e\n\u003ch1 id=\"限流計數器的同步需求\"\u003e限流計數器的同步需求\u003c/h1\u003e\n\u003cp\u003e如果系統有對 consumer 限流需求，記錄在 db 是一個選項，但這樣就必須所有 gateway 的節點都跟 db 建立連線，且不適用於 dbless 或是 hybrid mode 的架構。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003edbless 是指 data plane 的設置透過 kong.yml 來配置，每次配置都需要重啟服務。\u003c/p\u003e\n\u003cp\u003ehybrid mode 則是將 Control Plane 和 Data Plane 分離，CP 負責管理與同步設定，DP 專注於流量代理。DP 不直接連資料庫，只從 CP 接收設定。相反地，傳統模式沒有明確區分 DP 和 CP。每一台 Kong 節點同時扮演 CP 和 DP 的角色，也就是說，每個節點都可以管理設定（新增/修改服務、路由、插件等），這是 CP 的功能。每個節點也都會處理用戶端 API 請求，這是 DP 的功能，所有節點也都直接連接到資料庫。\u003c/p\u003e","title":"Kong APIM 與 Redis Sentinel 架構學習筆記"},{"content":"在 2025 年 6 月，科技圈熱烈討論法源公司指控 Lawsnote（七法公司）未經授權爬取其法律資料庫內容，構成著作權侵權及違反刑法第359條。以下依爭點，整理判決核心內容：\n一、民事判決：損害賠償計算基礎 法院區分三類資料性質，採用不同請求權基礎：\n法規沿革： 經刑事判決認定屬《著作權法》第7條「編輯著作」，受著作權保護。 請求權基礎：民法第 184 條第 1 項前段（故意侵權）。 法規內容與附件： 刑事判決未認定為著作，但屬「電磁紀錄」。 請求權基礎：民法第 184 條第 2 項（違反刑法第 359 條「無故取得他人電磁紀錄」之保護性法律）。 二、刑事判決核心爭點 爭點一：「法規沿革」是否受著作權保護？ 被告抗辯：\n法規沿革屬政府公文，不具著作權；縱有編排，因表達方式有限（思想與表達合併原則），不應受保護。 法源公司遲至 109 年 11 月才禁止爬蟲，此前行為不構成侵權。 法院認定：\n採用「最低程度創作」標準，比對法源公司與政府機關（如科技部、立法院）的沿革表述差異（例如條號範圍、主管機關變動、施行日期等）。 法源公司對資料進行「層次化選擇與編排」，呈現獨特性與原創性，非機械式羅列，故屬《著作權法》第7條保護之編輯著作。 爭點二：被告行為是否構成「合理使用」？ 原告主張：\n被告以商業目的（Lawsnote 為收費服務）100% 複製沿革資料，非少量引用或轉化性使用，嚴重損害原告市場價值。 被告主張：\n法規沿革屬政府應公開資訊，法源公司未收費提供，使用不損其利益。 Lawsnote 核心價值為搜尋功能，非沿革資料本身，對原市場影響甚微。 法院裁判理由：\n利用目的：純商業行為（收費服務）。 使用量：100% 複製。 市場影響：以低價與原告競爭，剝奪授權機會，造成實質損害。 不符合理使用，被告抗辯駁回。\n爭點三：爬蟲行為是否構成侵權？ 原告主張：\n被告於 107–110 年間撰寫 6 支爬蟲程式，從法源網站下載共 331,524 筆資料（含沿革、內容及附件），用於 Lawsnote 資料庫。 行為逾越法源《使用規範》禁止之自動化查詢與重製範圍。 被告抗辯：\n政府網站未完整保存歷史法規，爬取法源僅為便捷與完整性，不構成侵權。 法院認定：\n抽樣比對確認下載資料與法源內容「逐字相符」。 未獲授權且違反使用規範，構成著作權侵害。 三、未決爭議與批判性分析 （一）法規資料的公共性 vs. 著作權歸屬 法源公司承接司法院數億元標案維護法規資料，但判決未釐清： 政府委外產出之法規資料，著作財產權應歸屬公部門或企業？ 具公益性質的法規資料，是否可由民間企業專有？ （二）損害賠償計算的合理性爭議 法院以法源公司「建置成本」作為賠償基準，但學說與實務指出：\n建置成本屬「投入費用」，非「所失利益」；真正損害應為權利人喪失的「授權收益」。\n台灣著作權損害賠償計算原則是依據《著作權法》第 88 條。然而本案法院未採用「合理授權金」基準，直接以建置成本全額計算賠償，忽略資料庫可多次授權、成本分攤之商業邏輯。\n（三）爬蟲技術的合規性質疑 個人認為本案判決擴張解釋了刑法第 359 條：\n第 359 條\n無故取得、刪除或變更他人電腦或其相關設備之電磁紀錄，致生損害於公眾或他人者，處五年以下有期徒刑、拘役或科或併科六十萬元以下罰金。\n我查閱了刑法第 359 條的立法理由，該條於民國 92 年制定，當時竊取他人電磁紀錄仍以竊盜罪論處，但竊盜罪須破壞他人持有，而電磁紀錄被取得時，原持有人對該紀錄的持有未必受損，因此修法增訂妨害電腦使用罪章（參立法院第五屆第三會期第十二次會議議案關係文書）。此外，立法理由也參考美國聯邦法典第十八章第 1030 條，該條主要針對「未經授權」取得電腦資料，所謂未經授權，係指電腦本身設有技術性限制（如需登入、限定 IP 等），若行為人繞過這些限制取得資料，才構成犯罪。\n本案判決亦引用最高法院 112 年度台上字第 1029 號刑事判決，該案事實為被告離職前將公司信件轉寄至個人信箱並刪除公司信箱信件，屬於逾越權限取得具限制性資料，因而構成本條之罪。\n然而，本案法源網站屬公開網路，僅違反使用條款取得資料，應屬民事違約範疇，並非本條所欲規範之刑事責任。除非法源對爬蟲設有技術性限制且被繞過，否則難以構成刑法第 359 條之罪。若依一審見解，幾乎所有爬蟲行為皆可能落入本條規範，甚至一般使用者僅瀏覽網頁並複製內容亦可能涉罪，顯然過於擴張。\n結論 本案刑事判決確立「法規沿革」具編輯著作保護性，並認定爬蟲行為構成無故取得他人電磁紀錄。然而，法院對於刑法第 359 條的適用採取擴張解釋，未區分技術性限制與單純違反使用條款之情形，恐導致一般爬蟲或正常瀏覽行為亦落入刑責範圍，與立法本意有落差。民事部分，法院以建置成本作為損害賠償基準，未考量合理授權金及資料庫多次授權的商業實務，亦有爭議。\n整體而言，判決未正面回應公共財衍生資料的著作權歸屬、損害賠償計算標準，以及爬蟲技術的合理界線，對新創產業與法律資料開放性產生不利影響，未來相關爭議仍有待進一步釐清與討論。\n","permalink":"http://localhost:1313/posts/2025-06-30-lawbank-v-lawsnote/","summary":"\u003cp\u003e在 2025 年 6 月，科技圈熱烈討論法源公司指控 Lawsnote（七法公司）未經授權爬取其法律資料庫內容，構成著作權侵權及違反刑法第359條。以下依爭點，整理判決核心內容：\u003c/p\u003e\n\u003ch2 id=\"一民事判決損害賠償計算基礎\"\u003e一、民事判決：損害賠償計算基礎\u003c/h2\u003e\n\u003cp\u003e法院區分三類資料性質，採用不同請求權基礎：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e法規沿革\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e經刑事判決認定屬《著作權法》第7條「編輯著作」，受著作權保護。\u003c/li\u003e\n\u003cli\u003e請求權基礎：民法第 184 條第 1 項前段（故意侵權）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e法規內容與附件\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e刑事判決未認定為著作，但屬「電磁紀錄」。\u003c/li\u003e\n\u003cli\u003e請求權基礎：民法第 184 條第 2 項（違反刑法第 359 條「無故取得他人電磁紀錄」之保護性法律）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二刑事判決核心爭點\"\u003e二、刑事判決核心爭點\u003c/h2\u003e\n\u003ch3 id=\"爭點一法規沿革是否受著作權保護\"\u003e爭點一：「法規沿革」是否受著作權保護？\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e被告抗辯\u003c/strong\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e法規沿革屬政府公文，不具著作權；縱有編排，因表達方式有限（思想與表達合併原則），不應受保護。\u003c/li\u003e\n\u003cli\u003e法源公司遲至 109 年 11 月才禁止爬蟲，此前行為不構成侵權。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e法院認定\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e採用「最低程度創作」標準，比對法源公司與政府機關（如科技部、立法院）的沿革表述差異（例如條號範圍、主管機關變動、施行日期等）。\u003c/li\u003e\n\u003cli\u003e法源公司對資料進行「層次化選擇與編排」，呈現獨特性與原創性，非機械式羅列，故屬《著作權法》第7條保護之編輯著作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"爭點二被告行為是否構成合理使用\"\u003e爭點二：被告行為是否構成「合理使用」？\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e原告主張\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e被告以商業目的（Lawsnote 為收費服務）100% 複製沿革資料，非少量引用或轉化性使用，嚴重損害原告市場價值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e被告主張\u003c/strong\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e法規沿革屬政府應公開資訊，法源公司未收費提供，使用不損其利益。\u003c/li\u003e\n\u003cli\u003eLawsnote 核心價值為搜尋功能，非沿革資料本身，對原市場影響甚微。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e法院裁判理由\u003c/strong\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e利用目的\u003c/strong\u003e：純商業行為（收費服務）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e使用量\u003c/strong\u003e：100% 複製。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e市場影響\u003c/strong\u003e：以低價與原告競爭，剝奪授權機會，造成實質損害。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不符合理使用，被告抗辯駁回。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"爭點三爬蟲行為是否構成侵權\"\u003e爭點三：爬蟲行為是否構成侵權？\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e原告主張\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e被告於 107–110 年間撰寫 6 支爬蟲程式，從法源網站下載共 331,524 筆資料（含沿革、內容及附件），用於 Lawsnote 資料庫。\u003c/li\u003e\n\u003cli\u003e行為逾越法源《使用規範》禁止之自動化查詢與重製範圍。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e被告抗辯\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e政府網站未完整保存歷史法規，爬取法源僅為便捷與完整性，不構成侵權。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e法院認定\u003c/strong\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e抽樣比對確認下載資料與法源內容「逐字相符」。\u003c/li\u003e\n\u003cli\u003e未獲授權且違反使用規範，構成著作權侵害。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"三未決爭議與批判性分析\"\u003e三、未決爭議與批判性分析\u003c/h2\u003e\n\u003ch3 id=\"一法規資料的公共性-vs-著作權歸屬\"\u003e（一）法規資料的公共性 vs. 著作權歸屬\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e法源公司承接司法院數億元標案維護法規資料，但判決未釐清：\n\u003cul\u003e\n\u003cli\u003e政府委外產出之法規資料，著作財產權應歸屬公部門或企業？\u003c/li\u003e\n\u003cli\u003e具公益性質的法規資料，是否可由民間企業專有？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"二損害賠償計算的合理性爭議\"\u003e（二）損害賠償計算的合理性爭議\u003c/h3\u003e\n\u003cp\u003e法院以法源公司「建置成本」作為賠償基準，但學說與實務指出：\u003c/p\u003e","title":"法源公司 vs. Lawsnote 著作權侵權案"},{"content":"前言 曾經在各大平台（如 Medium、Vocus、Substack 等）嘗試發表文章，但最後還是覺得將內容放在自己的 GitHub Pages 最合適。平時的知識整理會以 Obsidian 為主，想公開分享的內容則會發布在這裡。既然這是第一篇文章，就以我的轉職簡短心得作為開場，希望對有類似想法的朋友有所幫助。\n如標題所述，我的本科專業是法律，並在取得法學碩士及律師執照後做了幾年訴訟律師，每天的生活就是：\n與當事人開會 研究法律問題 寫訴狀 到法院開庭 以上四點無限迴圈。 對，我忘了說一點：「法院等開庭」。\n這件事情有什麼特別的？嗯，任何事情都有可能 delay，法院開庭當然也不例外，有時候比較誇張會等 30 分鐘到 1 小時都有可能。\n我喜歡律師工作。我喜歡分析案情，研究法律問題，找出可以用的法律見解並應用在案件上。但律師工作性質以及我個人特質的雙重影響下，讓我不僅是在精神上或物理上，很難將工作與生活分開~時間久了身體也漸漸開始出狀況，所以我一直有在思考我有沒有更多其他可能。\n在一段職涯空檔中，我慢慢回想自己的過去。\n我從小學一年級就開始接觸電腦，直到現在我都是光華商場的常客，朋友、家人之間負責修電腦的工具人XD\n吸收法律知識和科技知識，對我來說都很有成就感。不同的是，前者多半是出於專業需求，而後者則多了一份純粹的興奮與熱情。\n會發現這點，是因為我在律師工作時，深刻體會到這行業極度依賴紙本作業。但我習慣把資料電子化，所以會把所有文書掃描成電子卷宗，這樣查找資料既方便又快速，開庭時翻資料也不會輸人。\n後來我開始思考，能不能再進一步改善這件事。當時就想過，或許可以開發一個系統，讓員工能用來管理案件，客戶也能登入查詢自己案件的進度。只是那時還沒開始學寫程式，這個想法就暫時擱在心裡。\n身邊不少朋友都是軟體工程師，而我本來就對電腦、程式這類東西很有興趣，長期下來也算耳濡目染。離開事務所後有了比較多自己的時間，就買了 Python 的書和線上課程，開始認真學習。學著學著發現，其實程式和法律有不少相似之處，所以上手還算順利，越學也越有興趣，還能用程式幫朋友、家人解決一些問題。\n在實作過程中我發現，比起一直看課程，動手做的學習效率和成就感都更高。於是我開始開發前面提到的那個事務所系統。這段開發經歷，讓我更確定自己真的熱愛寫程式，覺得這就是我想做的事。\n後來進入找工作階段，很幸運錄取了 AppWorks School 的 iOS Training Program，結業後也順利進入媒合的公司工作。\n坦白說，現在回頭看，轉職這個決定確實有點任性和衝動，畢竟算是完全打掉重練。不過既然已經踏上這條路，未來會在這裡持續更新技術文章，有機會也會聊聊法律相關的話題XD\n","permalink":"http://localhost:1313/posts/2025-06-30-lawyer-to-dev/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e曾經在各大平台（如 Medium、Vocus、Substack 等）嘗試發表文章，但最後還是覺得將內容放在自己的 GitHub Pages 最合適。平時的知識整理會以 Obsidian 為主，想公開分享的內容則會發布在這裡。既然這是第一篇文章，就以我的轉職簡短心得作為開場，希望對有類似想法的朋友有所幫助。\u003c/p\u003e\n\u003cp\u003e如標題所述，我的本科專業是法律，並在取得法學碩士及律師執照後做了幾年訴訟律師，每天的生活就是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e與當事人開會\u003c/li\u003e\n\u003cli\u003e研究法律問題\u003c/li\u003e\n\u003cli\u003e寫訴狀\u003c/li\u003e\n\u003cli\u003e到法院開庭\n以上四點無限迴圈。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"lawyer\" loading=\"lazy\" src=\"/posts/2025-06-30-lawyer-to-dev/2025-06-30-lawyer.jpeg\"\u003e\u003c/p\u003e\n\u003cp\u003e對，我忘了說一點：「法院等開庭」。\u003c/p\u003e\n\u003cp\u003e這件事情有什麼特別的？嗯，任何事情都有可能 delay，法院開庭當然也不例外，有時候比較誇張會等 30 分鐘到 1 小時都有可能。\u003c/p\u003e\n\u003cp\u003e我喜歡律師工作。我喜歡分析案情，研究法律問題，找出可以用的法律見解並應用在案件上。但律師工作性質以及我個人特質的雙重影響下，讓我不僅是在精神上或物理上，很難將工作與生活分開~時間久了身體也漸漸開始出狀況，所以我一直有在思考我有沒有更多其他可能。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e在一段職涯空檔中，我慢慢回想自己的過去。\u003c/p\u003e\n\u003cp\u003e我從小學一年級就開始接觸電腦，直到現在我都是光華商場的常客，朋友、家人之間負責修電腦的工具人XD\u003c/p\u003e\n\u003cp\u003e吸收法律知識和科技知識，對我來說都很有成就感。不同的是，前者多半是出於專業需求，而後者則多了一份純粹的興奮與熱情。\u003c/p\u003e\n\u003cp\u003e會發現這點，是因為我在律師工作時，深刻體會到這行業極度依賴紙本作業。但我習慣把資料電子化，所以會把所有文書掃描成電子卷宗，這樣查找資料既方便又快速，開庭時翻資料也不會輸人。\u003c/p\u003e\n\u003cp\u003e後來我開始思考，能不能再進一步改善這件事。當時就想過，或許可以開發一個系統，讓員工能用來管理案件，客戶也能登入查詢自己案件的進度。只是那時還沒開始學寫程式，這個想法就暫時擱在心裡。\u003c/p\u003e\n\u003cp\u003e身邊不少朋友都是軟體工程師，而我本來就對電腦、程式這類東西很有興趣，長期下來也算耳濡目染。離開事務所後有了比較多自己的時間，就買了 Python 的書和線上課程，開始認真學習。學著學著發現，其實程式和法律有不少相似之處，所以上手還算順利，越學也越有興趣，還能用程式幫朋友、家人解決一些問題。\u003c/p\u003e\n\u003cp\u003e在實作過程中我發現，比起一直看課程，動手做的學習效率和成就感都更高。於是我開始開發前面提到的那個事務所系統。這段開發經歷，讓我更確定自己真的熱愛寫程式，覺得這就是我想做的事。\u003c/p\u003e\n\u003cp\u003e後來進入找工作階段，很幸運錄取了 AppWorks School 的 iOS Training Program，結業後也順利進入媒合的公司工作。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e坦白說，現在回頭看，轉職這個決定確實有點任性和衝動，畢竟算是完全打掉重練。不過既然已經踏上這條路，未來會在這裡持續更新技術文章，有機會也會聊聊法律相關的話題XD\u003c/p\u003e","title":"律師轉職軟體工程師 - 變換人生技能樹"}]