<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API Gateway on Slash Life: Software engineer / Lawyer</title>
    <link>http://localhost:1313/categories/api-gateway/</link>
    <description>Recent content in API Gateway on Slash Life: Software engineer / Lawyer</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jul 2025 10:54:54 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/api-gateway/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kong API Gateway 真實 client IP 識別</title>
      <link>http://localhost:1313/posts/2025-07-03-apim-clientip/</link>
      <pubDate>Thu, 03 Jul 2025 10:54:54 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-03-apim-clientip/</guid>
      <description>&lt;p&gt;小弟最近要接手管理 APIM 了，會把踩的點記錄下來。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在管理 Kong API Gateway 的過程中，發現在啟用 IP Restriction Plugin 並設置白名單後，該 consumer 仍然驗證失敗。經確認此情況與 IP 置換有關。&lt;/p&gt;
&lt;p&gt;該 consumer request 路徑為：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Client → Load Balancer → Kong API Gateway → Backend Service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在這樣的架構中，Kong 接收到的 IP &lt;strong&gt;並不是實際的 Client IP&lt;/strong&gt;，而是來自 Load Balancer 的內部 IP。&lt;/p&gt;
&lt;p&gt;經確認：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kong 接收到的 client_ip 顯示為內部網段 IP（例如：以 .254 結尾）。&lt;/li&gt;
&lt;li&gt;這些 IP 實際上是 Load Balancer 的 IP。&lt;/li&gt;
&lt;li&gt;導致 IP Restriction Plugin 誤判來源 IP，合法用戶被錯誤拒絕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nginx-真實-ip-辨識機制&#34;&gt;Nginx 真實 IP 辨識機制&lt;/h3&gt;
&lt;p&gt;Kong 是建構在 &lt;code&gt;Nginx&lt;/code&gt; 之上，利用 &lt;code&gt;Nginx&lt;/code&gt; 的 &lt;code&gt;ngx_http_realip_module&lt;/code&gt; 模組來從 HTTP Header 中擷取真正的 Client IP，並改寫 &lt;code&gt;$remote_addr&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kong APIM 與 Redis Sentinel 架構學習筆記</title>
      <link>http://localhost:1313/posts/2025-07-01-kong-redis/</link>
      <pubDate>Tue, 01 Jul 2025 11:18:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-01-kong-redis/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;整理一下在 Kong APIM 架構下，Redis 在快取與限流計數器同步上的應用。
因為之前沒接觸過，僅就目前理解部分紀錄，不會提到太多細節，未來有機會再補充～&lt;/p&gt;
&lt;h1 id=&#34;redis-快取的用途&#34;&gt;Redis 快取的用途&lt;/h1&gt;
&lt;p&gt;Kong API Gateway 可以 Redis 來做快取，主要目的是可以快速回應重複的 API 請求，讓資料變動不頻繁的 API 可以直接回傳快取內容，可減少後端服務壓力。&lt;/p&gt;
&lt;h1 id=&#34;限流計數器的同步需求&#34;&gt;限流計數器的同步需求&lt;/h1&gt;
&lt;p&gt;如果系統有對 consumer 限流需求，記錄在 db 是一個選項，但這樣就必須所有 gateway 的節點都跟 db 建立連線，且不適用於 dbless 或是 hybrid mode 的架構。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dbless 是指 data plane 的設置透過 kong.yml 來配置，每次配置都需要重啟服務。&lt;/p&gt;
&lt;p&gt;hybrid mode 則是將 Control Plane 和 Data Plane 分離，CP 負責管理與同步設定，DP 專注於流量代理。DP 不直接連資料庫，只從 CP 接收設定。相反地，傳統模式沒有明確區分 DP 和 CP。每一台 Kong 節點同時扮演 CP 和 DP 的角色，也就是說，每個節點都可以管理設定（新增/修改服務、路由、插件等），這是 CP 的功能。每個節點也都會處理用戶端 API 請求，這是 DP 的功能，所有節點也都直接連接到資料庫。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
