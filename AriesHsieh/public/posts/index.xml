<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Slash Life: Software developer / Lawyer</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Slash Life: Software developer / Lawyer</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jul 2025 22:38:52 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>n8n 本地部署紀錄</title>
      <link>http://localhost:1313/posts/2025-07-04-n8n-local/</link>
      <pubDate>Fri, 04 Jul 2025 22:38:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-04-n8n-local/</guid>
      <description>&lt;p&gt;A basic record of local n8n deployment.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;h3 id=&#34;docker-composeyml&#34;&gt;docker-compose.yml&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.9&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;n8n_storage&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;n8n&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;n8nio/n8n:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:5678:5678&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;n8n_storage:/home/node/.n8n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;WEBHOOK_URL=https://&amp;lt;your-ngrok-domain&amp;gt;.ngrok-free.app&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# External webhook URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Expose local port 5678 to the internet via ngrok:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ngrok http http://localhost:5678
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Copy the generated ngrok public URL (e.g., &lt;code&gt;https://xxxx-xxx-xxx.ngrok-free.app&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and replace &lt;code&gt;&amp;lt;your-ngrok-domain&amp;gt;&lt;/code&gt; in &lt;code&gt;WEBHOOK_URL&lt;/code&gt; with your actual ngrok URL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the n8n service using Docker Compose:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Pipeline 編譯 iOS App Groups 權限未簽入問題</title>
      <link>http://localhost:1313/posts/2025-07-03-ios-azure/</link>
      <pubDate>Thu, 03 Jul 2025 16:27:33 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-03-ios-azure/</guid>
      <description>&lt;p&gt;前言
公司原本的上線流程最近要走 Azure DevOps 方式上線，我維護的 iOS App 不外乎也要走這個流程。原本測試都沒有太大問題，但上線之後發現 App Groups 功能沒有正確運作，就開始查找問題，最終找到問題所在並解決，記錄一下過程，並延伸相關知識。&lt;/p&gt;
&lt;h2 id=&#34;trouble-shooting&#34;&gt;Trouble Shooting&lt;/h2&gt;
&lt;p&gt;一開始覺得很奇怪，這次上線的內容並沒有異動到 App Group 的設定，所以應該跟 source code 沒有太大關係。後來先嘗試在本機 build 一版，結果發現透過這個方式運作正常，但透過 Azure pipeline build 出來的就會發生問題。因此轉向研究 pipeline yaml 的設定是否出現狀況。&lt;/p&gt;
&lt;p&gt;先進一步確認透過 Azure pipeline 包出來的 artifacts 內容是否正確，一般而言，iOS App 打包後的成品如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DistributionSummary.plist
ExportOptions.plist
YourAppName.ipa
Packaging.log
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-ipa&#34;&gt;查看 .ipa&lt;/h3&gt;
&lt;p&gt;我們可以查看 YourAppName.ipa 裡面到底簽入了哪些權限：&lt;/p&gt;
&lt;p&gt;解壓縮 .ipa 檔案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip YourAppName.ipa -d AppContents
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;進入 Payload 目錄：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd AppContents/Payload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;執行 codesign 指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;codesign -d --entitlements :- YourAppName.app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每個部分的含義是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;codesign&lt;/code&gt;：呼叫程式碼簽署工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;：表示 &amp;ldquo;display&amp;rdquo;，用於顯示簽署資訊&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-entitlements :-&lt;/code&gt;：要求工具顯示應用程式中包含的所有權限（entitlements）&lt;/li&gt;
&lt;li&gt;這裡的 &lt;code&gt;:-&lt;/code&gt; 是一個特殊的語法，表示將輸出導向到標準輸出（stdout）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YourAppName.app&lt;/code&gt;：要檢查的應用程式套件路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果有正確簽入 App Groups 的權限，應該要有 &lt;code&gt;&amp;lt;key&amp;gt;com.apple.security.application-groups&amp;lt;/key&amp;gt;&lt;/code&gt; 的蹤跡，但發現透過 Azure pipeline 包出來 .ipa 沒有。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kong API Gateway 真實 client IP 識別</title>
      <link>http://localhost:1313/posts/2025-07-03-apim-clientip/</link>
      <pubDate>Thu, 03 Jul 2025 10:54:54 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-03-apim-clientip/</guid>
      <description>&lt;p&gt;小弟最近要接手管理 APIM 了，會把踩的點記錄下來。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在管理 Kong API Gateway 的過程中，發現在啟用 IP Restriction Plugin 並設置白名單後，該 consumer 仍然驗證失敗。經確認此情況與 IP 置換有關。&lt;/p&gt;
&lt;p&gt;該 consumer request 路徑為：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Client → Load Balancer → Kong API Gateway → Backend Service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在這樣的架構中，Kong 接收到的 IP &lt;strong&gt;並不是實際的 Client IP&lt;/strong&gt;，而是來自 Load Balancer 的內部 IP。&lt;/p&gt;
&lt;p&gt;經確認：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kong 接收到的 client_ip 顯示為內部網段 IP（例如：以 .254 結尾）。&lt;/li&gt;
&lt;li&gt;這些 IP 實際上是 Load Balancer 的 IP。&lt;/li&gt;
&lt;li&gt;導致 IP Restriction Plugin 誤判來源 IP，合法用戶被錯誤拒絕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nginx-真實-ip-辨識機制&#34;&gt;Nginx 真實 IP 辨識機制&lt;/h3&gt;
&lt;p&gt;Kong 是建構在 &lt;code&gt;Nginx&lt;/code&gt; 之上，利用 &lt;code&gt;Nginx&lt;/code&gt; 的 &lt;code&gt;ngx_http_realip_module&lt;/code&gt; 模組來從 HTTP Header 中擷取真正的 Client IP，並改寫 &lt;code&gt;$remote_addr&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo &#43; PaperMod 靜態網站串接 Utterances 實作留言區</title>
      <link>http://localhost:1313/posts/2025-07-02-utterances/</link>
      <pubDate>Wed, 02 Jul 2025 16:11:41 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-02-utterances/</guid>
      <description>&lt;p&gt;雖然説這個靜態網頁主要是拿來做個人筆記記錄用，但想到如果有寫錯的地方，誤人子弟又沒有人告知好像也是個問題，
研究了一下，原來有將留言直接串接到指定 GitHub repo 的 Issues 充作留言區 (但必需要登入 GitHub 才能留言。)的方式。&lt;/p&gt;
&lt;p&gt;實驗了一下，串接成功，記錄一下過程。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-1-準備-github-repo&#34;&gt;Step 1: 準備 GitHub repo&lt;/h2&gt;
&lt;p&gt;確認你有一個公開的 GitHub repo，留言將儲存在這個 repo 的 Issues。
因為本站是部署在 GitHub Pages，理當就建立在這個 page 所屬 repo 上。&lt;/p&gt;
&lt;h2 id=&#34;step-2-安裝-utterances-github-app&#34;&gt;Step 2: 安裝 Utterances GitHub App&lt;/h2&gt;
&lt;p&gt;前往 &lt;a href=&#34;https://github.com/apps/utterances&#34;&gt;Utterances&lt;/a&gt; 的 GitHub App 頁面，將 App 安裝到你的留言 repo。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;UtterancesApp&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2025-07-02-utterances/image-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;這裡沒有必要全部授權，只授權單一 repo 即可。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;UtterancesAuth&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2025-07-02-utterances/image-2.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-3-產生-utterances-script&#34;&gt;Step 3: 產生 Utterances script&lt;/h2&gt;
&lt;p&gt;繼續下一步，前往設定頁，依序填寫以下內容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;repo 名稱（格式：username/repo）&lt;/li&gt;
&lt;li&gt;Issue 對應規則（建議選 pathname 或 title）&lt;/li&gt;
&lt;li&gt;可自訂 label（如 blog-comment）方便分類&lt;/li&gt;
&lt;li&gt;選擇主題色系&lt;/li&gt;
&lt;li&gt;將產生 &lt;code&gt;&amp;lt;script ...&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 複製下來。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-4-整合到-hugopapermod&#34;&gt;Step 4: 整合到 Hugo（PaperMod）&lt;/h2&gt;
&lt;p&gt;在 Hugo 專案目錄下建立或修改 &lt;code&gt;layouts/partials/comments.html&lt;/code&gt;，貼上剛剛產生的的 script。
接著在你的文章裡面啟用 &lt;code&gt;comment: true&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kong APIM 與 Redis Sentinel 架構學習筆記</title>
      <link>http://localhost:1313/posts/2025-07-01-kong-redis/</link>
      <pubDate>Tue, 01 Jul 2025 11:18:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-07-01-kong-redis/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;整理一下在 Kong APIM 架構下，Redis 在快取與限流計數器同步上的應用。
因為之前沒接觸過，僅就目前理解部分紀錄，不會提到太多細節，未來有機會再補充～&lt;/p&gt;
&lt;h1 id=&#34;redis-快取的用途&#34;&gt;Redis 快取的用途&lt;/h1&gt;
&lt;p&gt;Kong API Gateway 可以 Redis 來做快取，主要目的是可以快速回應重複的 API 請求，讓資料變動不頻繁的 API 可以直接回傳快取內容，可減少後端服務壓力。&lt;/p&gt;
&lt;h1 id=&#34;限流計數器的同步需求&#34;&gt;限流計數器的同步需求&lt;/h1&gt;
&lt;p&gt;如果系統有對 consumer 限流需求，記錄在 db 是一個選項，但這樣就必須所有 gateway 的節點都跟 db 建立連線，且不適用於 dbless 或是 hybrid mode 的架構。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dbless 是指 data plane 的設置透過 kong.yml 來配置，每次配置都需要重啟服務。&lt;/p&gt;
&lt;p&gt;hybrid mode 則是將 Control Plane 和 Data Plane 分離，CP 負責管理與同步設定，DP 專注於流量代理。DP 不直接連資料庫，只從 CP 接收設定。相反地，傳統模式沒有明確區分 DP 和 CP。每一台 Kong 節點同時扮演 CP 和 DP 的角色，也就是說，每個節點都可以管理設定（新增/修改服務、路由、插件等），這是 CP 的功能。每個節點也都會處理用戶端 API 請求，這是 DP 的功能，所有節點也都直接連接到資料庫。&lt;/p&gt;</description>
    </item>
    <item>
      <title>法源公司 vs. Lawsnote 著作權侵權案</title>
      <link>http://localhost:1313/posts/2025-06-30-lawbank-v-lawsnote/</link>
      <pubDate>Mon, 30 Jun 2025 23:38:06 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-06-30-lawbank-v-lawsnote/</guid>
      <description>&lt;p&gt;在 2025 年 6 月，科技圈熱烈討論法源公司指控 Lawsnote（七法公司）未經授權爬取其法律資料庫內容，構成著作權侵權及違反刑法第359條。以下依爭點，整理判決核心內容：&lt;/p&gt;
&lt;h2 id=&#34;一民事判決損害賠償計算基礎&#34;&gt;一、民事判決：損害賠償計算基礎&lt;/h2&gt;
&lt;p&gt;法院區分三類資料性質，採用不同請求權基礎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;法規沿革&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;經刑事判決認定屬《著作權法》第7條「編輯著作」，受著作權保護。&lt;/li&gt;
&lt;li&gt;請求權基礎：民法第 184 條第 1 項前段（故意侵權）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法規內容與附件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;刑事判決未認定為著作，但屬「電磁紀錄」。&lt;/li&gt;
&lt;li&gt;請求權基礎：民法第 184 條第 2 項（違反刑法第 359 條「無故取得他人電磁紀錄」之保護性法律）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二刑事判決核心爭點&#34;&gt;二、刑事判決核心爭點&lt;/h2&gt;
&lt;h3 id=&#34;爭點一法規沿革是否受著作權保護&#34;&gt;爭點一：「法規沿革」是否受著作權保護？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;被告抗辯&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;法規沿革屬政府公文，不具著作權；縱有編排，因表達方式有限（思想與表達合併原則），不應受保護。&lt;/li&gt;
&lt;li&gt;法源公司遲至 109 年 11 月才禁止爬蟲，此前行為不構成侵權。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;法院認定&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;採用「最低程度創作」標準，比對法源公司與政府機關（如科技部、立法院）的沿革表述差異（例如條號範圍、主管機關變動、施行日期等）。&lt;/li&gt;
&lt;li&gt;法源公司對資料進行「層次化選擇與編排」，呈現獨特性與原創性，非機械式羅列，故屬《著作權法》第7條保護之編輯著作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;爭點二被告行為是否構成合理使用&#34;&gt;爭點二：被告行為是否構成「合理使用」？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原告主張&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被告以商業目的（Lawsnote 為收費服務）100% 複製沿革資料，非少量引用或轉化性使用，嚴重損害原告市場價值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;被告主張&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;法規沿革屬政府應公開資訊，法源公司未收費提供，使用不損其利益。&lt;/li&gt;
&lt;li&gt;Lawsnote 核心價值為搜尋功能，非沿革資料本身，對原市場影響甚微。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;法院裁判理由&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;利用目的&lt;/strong&gt;：純商業行為（收費服務）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用量&lt;/strong&gt;：100% 複製。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;市場影響&lt;/strong&gt;：以低價與原告競爭，剝奪授權機會，造成實質損害。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;不符合理使用，被告抗辯駁回。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;爭點三爬蟲行為是否構成侵權&#34;&gt;爭點三：爬蟲行為是否構成侵權？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原告主張&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被告於 107–110 年間撰寫 6 支爬蟲程式，從法源網站下載共 331,524 筆資料（含沿革、內容及附件），用於 Lawsnote 資料庫。&lt;/li&gt;
&lt;li&gt;行為逾越法源《使用規範》禁止之自動化查詢與重製範圍。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;被告抗辯&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;政府網站未完整保存歷史法規，爬取法源僅為便捷與完整性，不構成侵權。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;法院認定&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽樣比對確認下載資料與法源內容「逐字相符」。&lt;/li&gt;
&lt;li&gt;未獲授權且違反使用規範，構成著作權侵害。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三未決爭議與批判性分析&#34;&gt;三、未決爭議與批判性分析&lt;/h2&gt;
&lt;h3 id=&#34;一法規資料的公共性-vs-著作權歸屬&#34;&gt;（一）法規資料的公共性 vs. 著作權歸屬&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;法源公司承接司法院數億元標案維護法規資料，但判決未釐清：
&lt;ul&gt;
&lt;li&gt;政府委外產出之法規資料，著作財產權應歸屬公部門或企業？&lt;/li&gt;
&lt;li&gt;具公益性質的法規資料，是否可由民間企業專有？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二損害賠償計算的合理性爭議&#34;&gt;（二）損害賠償計算的合理性爭議&lt;/h3&gt;
&lt;p&gt;法院以法源公司「建置成本」作為賠償基準，但學說與實務指出：&lt;/p&gt;</description>
    </item>
    <item>
      <title>律師轉職軟體工程師 - 變換人生技能樹</title>
      <link>http://localhost:1313/posts/2025-06-30-lawyer-to-dev/</link>
      <pubDate>Mon, 30 Jun 2025 20:54:43 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-06-30-lawyer-to-dev/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;曾經在各大平台（如 Medium、Vocus、Substack 等）嘗試發表文章，但最後還是覺得將內容放在自己的 GitHub Pages 最合適。平時的知識整理會以 Obsidian 為主，想公開分享的內容則會發布在這裡。既然這是第一篇文章，就以我的轉職簡短心得作為開場，希望對有類似想法的朋友有所幫助。&lt;/p&gt;
&lt;p&gt;如標題所述，我的本科專業是法律，並在取得法學碩士及律師執照後做了幾年訴訟律師，每天的生活就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;與當事人開會&lt;/li&gt;
&lt;li&gt;研究法律問題&lt;/li&gt;
&lt;li&gt;寫訴狀&lt;/li&gt;
&lt;li&gt;到法院開庭
以上四點無限迴圈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;lawyer&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2025-06-30-lawyer-to-dev/2025-06-30-lawyer.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;對，我忘了說一點：「法院等開庭」。&lt;/p&gt;
&lt;p&gt;這件事情有什麼特別的？嗯，任何事情都有可能 delay，法院開庭當然也不例外，有時候比較誇張會等 30 分鐘到 1 小時都有可能。&lt;/p&gt;
&lt;p&gt;我喜歡律師工作。我喜歡分析案情，研究法律問題，找出可以用的法律見解並應用在案件上。但律師工作性質以及我個人特質的雙重影響下，讓我不僅是在精神上或物理上，很難將工作與生活分開~時間久了身體也漸漸開始出狀況，所以我一直有在思考我有沒有更多其他可能。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在一段職涯空檔中，我慢慢回想自己的過去。&lt;/p&gt;
&lt;p&gt;我從小學一年級就開始接觸電腦，直到現在我都是光華商場的常客，朋友、家人之間負責修電腦的工具人XD&lt;/p&gt;
&lt;p&gt;吸收法律知識和科技知識，對我來說都很有成就感。不同的是，前者多半是出於專業需求，而後者則多了一份純粹的興奮與熱情。&lt;/p&gt;
&lt;p&gt;會發現這點，是因為我在律師工作時，深刻體會到這行業極度依賴紙本作業。但我習慣把資料電子化，所以會把所有文書掃描成電子卷宗，這樣查找資料既方便又快速，開庭時翻資料也不會輸人。&lt;/p&gt;
&lt;p&gt;後來我開始思考，能不能再進一步改善這件事。當時就想過，或許可以開發一個系統，讓員工能用來管理案件，客戶也能登入查詢自己案件的進度。只是那時還沒開始學寫程式，這個想法就暫時擱在心裡。&lt;/p&gt;
&lt;p&gt;身邊不少朋友都是軟體工程師，而我本來就對電腦、程式這類東西很有興趣，長期下來也算耳濡目染。離開事務所後有了比較多自己的時間，就買了 Python 的書和線上課程，開始認真學習。學著學著發現，其實程式和法律有不少相似之處，所以上手還算順利，越學也越有興趣，還能用程式幫朋友、家人解決一些問題。&lt;/p&gt;
&lt;p&gt;在實作過程中我發現，比起一直看課程，動手做的學習效率和成就感都更高。於是我開始開發前面提到的那個事務所系統。這段開發經歷，讓我更確定自己真的熱愛寫程式，覺得這就是我想做的事。&lt;/p&gt;
&lt;p&gt;後來進入找工作階段，很幸運錄取了 AppWorks School 的 iOS Training Program，結業後也順利進入媒合的公司工作。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;坦白說，現在回頭看，轉職這個決定確實有點任性和衝動，畢竟算是完全打掉重練。不過既然已經踏上這條路，未來會在這裡持續更新技術文章，有機會也會聊聊法律相關的話題XD&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
